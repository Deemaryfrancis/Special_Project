{
	"info": {
		"_postman_id": "9fff745f-d236-4ad9-a2c5-3cbda458aeb6",
		"name": "RegresAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19338958"
	},
	"item": [
		{
			"name": "Login - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response has the required fields \", function () {",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item).to.have.property('name');",
							"        pm.expect(item).to.have.property('year');",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('color');",
							"        pm.expect(item).to.have.property('pantone_value');",
							"        });",
							"});",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Name inside the data array should be a non-empty string\", function () {  ",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");",
							"    });",
							"});",
							"pm.test(\"id should be numeric\", function () {  ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.id).to.be.a('number')",
							"    });",
							"});",
							"pm.test(\"Year for each data should not be a number not a negative value\", function () {",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.year).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"pm.test(\"Support variable should exist and should be an object\", function () {  ",
							"    pm.expect(responseData.support).to.be.an('Object').and.to.exist;",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Error message should exist\", function () {",
							"    pm.expect(responseData.error).to.exist;",
							"});",
							"pm.test(\"Error message should should display 'Missing Password'\", function () {",
							"    pm.expect(responseData.error).to.eql(\"Missing password\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"peter@klaven\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": [
				{
					"name": "Login - Unsuccessful",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"peter@klaven\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\n    \"error\": \"Missing password\"\n}"
				}
			]
		},
		{
			"name": "Create Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.test(\"Response status code is 201, created\", function () {",
							"    pm.expect(pm.response.code).to.equal(201, \"Created\");",
							"});",
							"pm.test(\"Response has the required fields\", function () {",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('job');",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('createdAt');",
							"});",
							"pm.test(\"Name is a string and not empty\", function () {",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"});",
							"pm.test(\"Job is a string and not empty\", function () {",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"pm.test(\"CreatedAt field is in a valid date-time format\", function () {",
							"  pm.expect(responseData.createdAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"});",
							"pm.test(\"Id is a non-empty string containing only numbers\", function () {",
							"    pm.expect(responseData.id).to.be.a('string');",
							"    pm.expect(responseData.id).to.not.be.empty;",
							"    pm.expect(responseData.id).to.match(/^\\d+$/);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": [
				{
					"name": "Create Users",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\",\n    \"id\": \"505\",\n    \"createdAt\": \"2023-12-31T14:40:05.341Z\"\n}"
				}
			]
		},
		{
			"name": "Update Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();  ",
							"pm.test(\"Response status code is (200 OK)\", function () {",
							"    pm.response.to.have.status(200, \"OK\");",
							"});",
							"pm.test(\"Response has the required fields\", function () {",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('job');",
							"    pm.expect(responseData).to.have.property('updatedAt');",
							"});",
							"pm.test(\"Name is a string and not empty\", function () {",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"});",
							"pm.test(\"Job is a string and not empty\", function () {",
							"    pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"pm.test(\"updatedAt field is in a valid date-time format\", function () {",
							"  pm.expect(responseData.updatedAt).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z$/);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": [
				{
					"name": "Update Users",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\",\n    \"updatedAt\": \"2023-12-31T14:41:22.018Z\"\n}"
				}
			]
		},
		{
			"name": "List Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Page number in the response should be 2\", function () {  ",
							"    pm.expect(responseData).to.have.property('page', 2);",
							"});",
							"pm.test(\"Data array is present and contains the expected number of elements\", function () {",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.data).to.exist.and.to.be.an('array').with.lengthOf(6);",
							"});",
							"pm.test(\"Email format for each user in the data array is valid\", function () {",
							"    responseData.data.forEach(function(user) {",
							"        pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);",
							"    });",
							"});",
							"pm.test(\"Support object is present and contains expected fields\", function () {  ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.support).to.exist;",
							"    pm.expect(responseData.support.url).to.be.a('string');",
							"    pm.expect(responseData.support.text).to.be.a('string');",
							"});",
							"pm.test(\"Response has the required fields \", function () {",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('email');",
							"        pm.expect(item).to.have.property('first_name');",
							"        pm.expect(item).to.have.property('last_name');",
							"        pm.expect(item).to.have.property('avatar');",
							"    });",
							"});",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"First name inside the data array should be a non-empty string\", function () {  ",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.first_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");",
							"    });",
							"});",
							"pm.test(\"Last name inside the data array should be a non-empty string\", function () {  ",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.last_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");",
							"    });",
							"});",
							"pm.test(\"id should be numeric\", function () {  ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.id).to.be.a('number')",
							"    });",
							"});",
							"pm.test(\"Support variabe should exist and should be an object\", function () {  ",
							"    pm.expect(responseData.support).to.be.an('Object').and.to.exist;",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users?page=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": [
				{
					"name": "List Users",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users?page=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 2,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 7,\n            \"email\": \"michael.lawson@reqres.in\",\n            \"first_name\": \"Michael\",\n            \"last_name\": \"Lawson\",\n            \"avatar\": \"https://reqres.in/img/faces/7-image.jpg\"\n        },\n        {\n            \"id\": 8,\n            \"email\": \"lindsay.ferguson@reqres.in\",\n            \"first_name\": \"Lindsay\",\n            \"last_name\": \"Ferguson\",\n            \"avatar\": \"https://reqres.in/img/faces/8-image.jpg\"\n        },\n        {\n            \"id\": 9,\n            \"email\": \"tobias.funke@reqres.in\",\n            \"first_name\": \"Tobias\",\n            \"last_name\": \"Funke\",\n            \"avatar\": \"https://reqres.in/img/faces/9-image.jpg\"\n        },\n        {\n            \"id\": 10,\n            \"email\": \"byron.fields@reqres.in\",\n            \"first_name\": \"Byron\",\n            \"last_name\": \"Fields\",\n            \"avatar\": \"https://reqres.in/img/faces/10-image.jpg\"\n        },\n        {\n            \"id\": 11,\n            \"email\": \"george.edwards@reqres.in\",\n            \"first_name\": \"George\",\n            \"last_name\": \"Edwards\",\n            \"avatar\": \"https://reqres.in/img/faces/11-image.jpg\"\n        },\n        {\n            \"id\": 12,\n            \"email\": \"rachel.howell@reqres.in\",\n            \"first_name\": \"Rachel\",\n            \"last_name\": \"Howell\",\n            \"avatar\": \"https://reqres.in/img/faces/12-image.jpg\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				}
			]
		},
		{
			"name": "List single User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"Email is in a valid format\", function () {",
							"     pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
							"});",
							"pm.test(\"Avatar URL should not be empty\", function () {   ",
							"    pm.expect(responseData.data.avatar).to.exist.and.to.not.be.empty;",
							"});",
							"pm.test(\"Support object contains expected URL and text properties\", function () {",
							"    pm.expect(responseData.support).to.be.an('object');",
							"    pm.expect(responseData.support.url).to.be.a('string').and.to.not.be.empty;",
							"    pm.expect(responseData.support.text).to.be.a('string').and.to.not.be.empty;",
							"});",
							"pm.test(\"Responsedata should have property of data\", function () {  ",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData).to.have.property('support');",
							"});",
							"pm.test(\"data should have the required fields\", function () {  ",
							"    pm.expect(responseData.data).to.have.property('id');",
							"    pm.expect(responseData.data).to.have.property('first_name');",
							"    pm.expect(responseData.data).to.have.property('last_name');",
							"    pm.expect(responseData.data).to.have.property('email');",
							"    pm.expect(responseData.data).to.have.property('avatar');",
							"});",
							"pm.test(\"id is a number and not null\", function () {",
							"    pm.expect(responseData.data.id).to.be.a('number').and.is.not.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/users/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": [
				{
					"name": "List single User",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"data\": {\n        \"id\": 2,\n        \"email\": \"janet.weaver@reqres.in\",\n        \"first_name\": \"Janet\",\n        \"last_name\": \"Weaver\",\n        \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n    },\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				}
			]
		},
		{
			"name": "List resources",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.test(\"Response status code is (200 OK)\", function () {",
							"    pm.expect(pm.response.code).to.equal(200, \"OK\");",
							"});",
							"pm.test(\"Data array is present and contains the expected number of elements\", function () {",
							"    pm.expect(responseData).to.have.property('data').that.is.an('array').with.lengthOf(6);",
							"});",
							"pm.test(\"Support object is present and contains expected fields\", function () {  ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.support).to.exist;",
							"    pm.expect(responseData.support.url).to.be.a('string');",
							"    pm.expect(responseData.support.text).to.be.a('string');",
							"});",
							"pm.test(\"Support URL is in valid format\", function () {",
							"    pm.expect(responseData.support).to.be.an('object');",
							"    pm.expect(responseData.support.url).to.match(/^https?:\\/\\/\\S+$/);",
							"});",
							"pm.test(\"Response has the required fields \", function () {",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item).to.have.property('name');",
							"        pm.expect(item).to.have.property('year');",
							"        pm.expect(item).to.have.property('id');",
							"        pm.expect(item).to.have.property('color');",
							"        pm.expect(item).to.have.property('pantone_value');",
							"        });",
							"});",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Name inside the data array should be a non-empty string\", function () {  ",
							"    pm.expect(responseData.data).to.be.an('array');",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should be a non-empty string\");",
							"    });",
							"});",
							"pm.test(\"id should be numeric\", function () {  ",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.id).to.be.a('number')",
							"    });",
							"});",
							"pm.test(\"Year for each data should not be a number not a negative value\", function () {",
							"    responseData.data.forEach(function(item) {",
							"        pm.expect(item.year).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/unknown",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": [
				{
					"name": "List resources",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/unknown",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"unknown"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				}
			]
		},
		{
			"name": "List single resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"  ",
							"pm.test(\"Response status code is (200, OK)\", function () {",
							"  pm.response.to.have.status(200, \"OK\");",
							"});",
							"pm.test(\"Responsedata should have property of data\", function () {  ",
							"    pm.expect(responseData).to.have.property('data');",
							"    pm.expect(responseData).to.have.property('support');",
							"});",
							"pm.test(\"data should have the required fields\", function () {  ",
							"    pm.expect(responseData.data).to.have.property('id');",
							"    pm.expect(responseData.data).to.have.property('name');",
							"    pm.expect(responseData.data).to.have.property('year');",
							"    pm.expect(responseData.data).to.have.property('color');",
							"    pm.expect(responseData.data).to.have.property('pantone_value');",
							"});",
							"pm.test(\"Name is a non-empty string\", function () {  ",
							"    pm.expect(responseData.data.name).to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"});",
							"pm.test(\"id is a number and not null\", function () {",
							"    pm.expect(responseData.data.id).to.be.a('number').and.is.not.null;",
							"});",
							"pm.test(\"year is a number and not empty\", function () {",
							"    pm.expect(responseData.data.year).to.be.a('number').is.not.null;",
							"});",
							"pm.test(\"Color is in a valid hex format\", function () {",
							"    pm.expect(responseData.data.color).to.match(/^#[0-9A-Fa-f]{6}$/);",
							"});",
							"pm.test(\"Support URL is a valid URL\", function () {   ",
							"    pm.expect(responseData.support.url).to.match(/^https?:\\/\\/(www\\.)?\\w+\\.\\w+/);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/unknown/2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": [
				{
					"name": "List single resource",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/unknown/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"unknown",
								"2"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"data\": {\n        \"id\": 2,\n        \"name\": \"fuchsia rose\",\n        \"year\": 2001,\n        \"color\": \"#C74375\",\n        \"pantone_value\": \"17-2031\"\n    },\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
				}
			]
		},
		{
			"name": "Register - Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"    ",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains the required field\", function () {   ",
							"    pm.expect(responseData).to.have.property('id');",
							"    pm.expect(responseData).to.have.property('token');",
							"});",
							"pm.test(\"Token is a non-empty string and is in the right format\", function () {  ",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1)",
							"    pm.expect(responseData.token).to.match(/[A-Za-z0-9]{16}/);",
							"});",
							"pm.test(\"Id is a positive integer\", function () {",
							"    pm.expect(responseData.id).to.be.a('number');",
							"    pm.expect(responseData.id).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": [
				{
					"name": "Register - Successful",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 4,\n    \"token\": \"QpwL5tke4Pnpja7X4\"\n}"
				}
			]
		},
		{
			"name": "Register - Unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"pm.test(\"Error message should exist\", function () {",
							"    pm.expect(responseData.error).to.exist;",
							"});",
							"pm.test(\"Error message should should display 'Missing Password'\", function () {",
							"    pm.expect(responseData.error).to.eql(\"Missing password\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": [
				{
					"name": "Register - Unsuccessful",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"name": "Content-Type",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"error\": \"Missing password\"\n}"
				}
			]
		}
	]
}